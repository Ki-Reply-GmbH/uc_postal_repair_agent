"""
This module contains the RepairAgent class which is responsible for identifying
and repairing errors in code files. It uses a language model to generate tasks 
based on a failed log, find the file with the error, repair the file, and 
generate a commit message.
"""
import os
import yaml
from config import PromptConfig
from models import LLModel

class RepairAgent:
    """
    A class used to repair source code files. A CI/CD log is provided to the 
    RepairAgent, which indicates a failing workflow run. Based on this 
    information, the Agent generates tasks, finds the file with the error, and
    corrects the error. It then generates a commit message to be used in a pull
    request. 

    Attributes
    ----------
    _prompts : PromptConfig
        an instance of PromptConfig that contains the prompts for the language 
        model
    _model : LLModel
        an instance of LLModel that is the language model used for generating 
        tasks and responses
    _failed_log : str
        a string that represents a failing GitHub Actions workflow run
    _tasks : dict
        a dictionary that contains the tasks generated by the language model
    _response : str
        a string that contains the response from the language model

    Methods
    -------
    get_f_name():
        Returns the file name from the tasks.
    get_explanation():
        Returns the explanation from the tasks.
    get_error_area():
        Returns the error area from the tasks.
    get_response():
        Returns the response from the language model.
    _make_tasks():
        Generates tasks using the language model and the log prompt.
    find_file(path: str, file_name: str, file_content: str):
        Finds and returns the path of a file with a specific name and content.
    repair_file(file_path: str):
        Repairs a file at a specific path using the language model.
    make_commit_msg():
        Generates a commit message using the language model and the tasks.
    """
    def __init__(self, prompts: PromptConfig, model: LLModel, failed_log: str):
        """
        Initializes the RepairAgent with the given prompts, model, and failed 
        log. Also generates tasks and sets the initial response to an empty 
        string.

        Args:
        prompts (PromptConfig): An instance of PromptConfig that contains the 
                                prompts for the language model.
        model (LLModel): An instance of LLModel that is the language model used
                         for generating tasks and responses.
        failed_log (str): A string that represents a failing GitHub Actions 
                          workflow run.
        """
        self._prompts = prompts
        self._model = model
        self._failed_log = failed_log #Currently a failing GitHub Actions workflow run
        self._tasks = self._make_tasks()
        self._response = ""

    def get_f_name(self):
        """
        Returns the file name from the tasks.

        Returns:
        str: The file name.
        """
        return self._tasks["file"]

    def get_explanation(self):
        """
        Returns the explanation from the tasks.

        Returns:
        str: The explanation.
        """
        return self._tasks["explanation"]

    def get_error_area(self):
        """
        Returns the error area from the tasks.

        Returns:
        str: The error area.
        """
        return self._tasks["error_area"]
    
    def get_response(self):
        """
        Returns the response from the language model.

        Returns:
        str: The response.
        """
        return self._response

    def _make_tasks(self):
        """
        Generates tasks using the language model and the log prompt.

        Returns:
        dict: The tasks.
        """
        tasks = self._model.get_completion(
            self._prompts.log_prompt.format(log=self._failed_log),
            "json_object"
            )
        return tasks
    
    @staticmethod
    def find_file(path, file_name, file_content):
        """
        Finds and returns the path of a file with a specific name and content.

        Parameters:
        path (str): The path to start the search from.
        file_name (str): The name of the file to find.
        file_content (str): The content to look for in the file.

        Returns:
        str: The path of the file if found, None otherwise.
        """
        for root, _, files in os.walk(path):
            if file_name in files:
                with open(os.path.join(root, file_name), "r") as file:
                    if file_content in file.read():
                        return os.path.join(root, file_name)
        return None
    
    def repair_file(self, file_path):
        """
        Repairs a file at a specific path using the language model.

        Parameters:
        file_path (str): The path of the file to repair.
        """
        error_area = self.get_error_area()
        explanation = self.get_explanation()

        with open(file_path, "r") as file:
            file_content = file.read()
            file.close()
        
        self._response = self._model.get_completion(
            self._prompts.repair_prompt.format(
                explanation=explanation,
                error_area=error_area,
                source_code=file_content
            ),
            "str"
        )

    def make_commit_msg(self):
        """
        Generates a commit message using the language model and the tasks.

        Returns:
        str: The commit message.
        """
        return self._model.get_completion(
            self._prompts.commit_prompt.format(
                information=str(self._tasks)
            ),
            "str"
        )
    
    def _extract_jobs_from_github_actions(self, file_paths):
        jobs_dict = {}
        for file_path in file_paths:
            with open(file_path, "r") as stream:
                try:
                    workflow = yaml.safe_load(stream)
                except yaml.YAMLError as exc:
                    print(exc)

            jobs_dict[file_path] = {}
            for job_name, job_properties in workflow.get("jobs", {}).items():
                jobs_dict[file_path][job_name] = job_properties

        return jobs_dict